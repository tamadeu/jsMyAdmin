import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Loader2, Database, User, Settings, Check } from "lucide-react";
import { Progress } from "@/components/ui/progress";
import { apiService } from "@/services/api";
import { useTranslation } from "react-i18next";

interface SetupStep {
  id: string;
  title: string;
  description: string;
  completed: boolean;
}

export default function InitialSetupWizard() {
  const { t } = useTranslation();
  const [currentStep, setCurrentStep] = useState(0);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  
  // Root connection data
  const [rootConnection, setRootConnection] = useState({
    host: 'localhost',
    port: 3306,
    username: 'root',
    password: ''
  });

  // System user configuration
  const [systemUserConfig, setSystemUserConfig] = useState({
    username: 'jsmyadmin_system',
    password: '',
    confirmPassword: ''
  });

  // Environment variables
  const [envVars, setEnvVars] = useState({
    sessionSecretKey: '',
    autoGenerated: false
  });

  const steps: SetupStep[] = [
    {
      id: 'root-connection',
      title: 'Conexão Administrativa',
      description: 'Configure a conexão com um usuário administrativo (root ou similar)',
      completed: false
    },
    {
      id: 'system-database',
      title: 'Banco de Sistema',
      description: 'Criação do banco de dados javascriptmyadmin_meta',
      completed: false
    },
    {
      id: 'system-user',
      title: 'Usuário do Sistema',
      description: 'Configuração do usuário jsmyadmin_system',
      completed: false
    },
    {
      id: 'environment',
      title: 'Configuração de Ambiente',
      description: 'Configuração das variáveis de ambiente',
      completed: false
    }
  ];

  const [completedSteps, setCompletedSteps] = useState<string[]>([]);
  
  const isStepCompleted = (stepId: string) => completedSteps.includes(stepId);
  const progress = (completedSteps.length / steps.length) * 100;

  const generateSecretKey = () => {
    const key = Array.from({ length: 64 }, () => 
      Math.floor(Math.random() * 36).toString(36)
    ).join('');
    setEnvVars(prev => ({ ...prev, sessionSecretKey: key, autoGenerated: true }));
  };

  const testRootConnection = async () => {
    setLoading(true);
    setError(null);
    setSuccess(null);
    
    try {
      const response = await apiService.testRootConnection(rootConnection);
      if (response.success) {
        setSuccess('Conexão estabelecida com sucesso!');
        setCompletedSteps(prev => [...prev.filter(id => id !== 'root-connection'), 'root-connection']);
        setTimeout(() => setCurrentStep(1), 1500);
      } else {
        setError(response.message || 'Falha na conexão');
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Erro de conexão');
    } finally {
      setLoading(false);
    }
  };

  const createSystemDatabase = async () => {
    setLoading(true);
    setError(null);
    setSuccess(null);
    
    try {
      const response = await apiService.createSystemDatabase(rootConnection);
      if (response.success) {
        setSuccess('Banco de dados do sistema criado com sucesso!');
        setCompletedSteps(prev => [...prev.filter(id => id !== 'system-database'), 'system-database']);
        setTimeout(() => setCurrentStep(2), 1500);
      } else {
        setError(response.message || 'Falha na criação do banco');
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Erro na criação do banco');
    } finally {
      setLoading(false);
    }
  };

  const createSystemUser = async () => {
    if (systemUserConfig.password !== systemUserConfig.confirmPassword) {
      setError('As senhas não coincidem');
      return;
    }
    
    if (systemUserConfig.password.length < 8) {
      setError('A senha deve ter pelo menos 8 caracteres');
      return;
    }
    
    setLoading(true);
    setError(null);
    setSuccess(null);
    
    try {
      const response = await apiService.createSystemUser(rootConnection, systemUserConfig);
      if (response.success) {
        setSuccess('Usuário do sistema criado com sucesso!');
        setCompletedSteps(prev => [...prev.filter(id => id !== 'system-user'), 'system-user']);
        setTimeout(() => setCurrentStep(3), 1500);
      } else {
        setError(response.message || 'Falha na criação do usuário');
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Erro na criação do usuário');
    } finally {
      setLoading(false);
    }
  };

  const finalizeSetup = async () => {
    if (!envVars.sessionSecretKey) {
      setError('Chave de sessão é obrigatória');
      return;
    }
    
    setLoading(true);
    setError(null);
    setSuccess(null);
    
    try {
      const response = await apiService.finalizeSystemSetup({
        systemUser: systemUserConfig,
        sessionSecretKey: envVars.sessionSecretKey
      });
      
      if (response.success) {
        setSuccess('Configuração inicial concluída com sucesso!');
        setCompletedSteps(prev => [...prev.filter(id => id !== 'environment'), 'environment']);
        
        // Aguardar um pouco e recarregar a página para aplicar as novas configurações
        setTimeout(() => {
          window.location.reload();
        }, 2000);
      } else {
        setError(response.message || 'Falha na finalização da configuração');
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Erro na finalização da configuração');
    } finally {
      setLoading(false);
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 0:
        return (
          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="host">Host</Label>
                <Input
                  id="host"
                  value={rootConnection.host}
                  onChange={(e) => setRootConnection(prev => ({ ...prev, host: e.target.value }))}
                  placeholder="localhost"
                />
              </div>
              <div>
                <Label htmlFor="port">Porta</Label>
                <Input
                  id="port"
                  type="number"
                  value={rootConnection.port}
                  onChange={(e) => setRootConnection(prev => ({ ...prev, port: parseInt(e.target.value) }))}
                  placeholder="3306"
                />
              </div>
            </div>
            <div>
              <Label htmlFor="username">Usuário</Label>
              <Input
                id="username"
                value={rootConnection.username}
                onChange={(e) => setRootConnection(prev => ({ ...prev, username: e.target.value }))}
                placeholder="root"
              />
            </div>
            <div>
              <Label htmlFor="password">Senha</Label>
              <Input
                id="password"
                type="password"
                value={rootConnection.password}
                onChange={(e) => setRootConnection(prev => ({ ...prev, password: e.target.value }))}
                placeholder="Senha do usuário root"
              />
            </div>
            <Button 
              onClick={testRootConnection} 
              disabled={loading || !rootConnection.username}
              className="w-full"
            >
              {loading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              Testar Conexão
            </Button>
          </div>
        );

      case 1:
        return (
          <div className="space-y-4">
            <p className="text-muted-foreground">
              Será criado o banco de dados <code>javascriptmyadmin_meta</code> com as tabelas necessárias 
              para o funcionamento do sistema, incluindo histórico de consultas e configurações.
            </p>
            <Button 
              onClick={createSystemDatabase} 
              disabled={loading}
              className="w-full"
            >
              {loading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              Criar Banco de Sistema
            </Button>
          </div>
        );

      case 2:
        return (
          <div className="space-y-4">
            <div>
              <Label htmlFor="sysUsername">Nome do Usuário</Label>
              <Input
                id="sysUsername"
                value={systemUserConfig.username}
                onChange={(e) => setSystemUserConfig(prev => ({ ...prev, username: e.target.value }))}
                placeholder="jsmyadmin_system"
              />
            </div>
            <div>
              <Label htmlFor="sysPassword">Senha</Label>
              <Input
                id="sysPassword"
                type="password"
                value={systemUserConfig.password}
                onChange={(e) => setSystemUserConfig(prev => ({ ...prev, password: e.target.value }))}
                placeholder="Digite uma senha segura (min. 8 caracteres)"
              />
            </div>
            <div>
              <Label htmlFor="sysConfirmPassword">Confirmar Senha</Label>
              <Input
                id="sysConfirmPassword"
                type="password"
                value={systemUserConfig.confirmPassword}
                onChange={(e) => setSystemUserConfig(prev => ({ ...prev, confirmPassword: e.target.value }))}
                placeholder="Confirme a senha"
              />
            </div>
            <Button 
              onClick={createSystemUser} 
              disabled={loading || !systemUserConfig.password || systemUserConfig.password !== systemUserConfig.confirmPassword}
              className="w-full"
            >
              {loading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              Criar Usuário do Sistema
            </Button>
          </div>
        );

      case 3:
        return (
          <div className="space-y-4">
            <div>
              <Label htmlFor="sessionKey">Chave de Sessão</Label>
              <div className="flex gap-2">
                <Input
                  id="sessionKey"
                  value={envVars.sessionSecretKey}
                  onChange={(e) => setEnvVars(prev => ({ ...prev, sessionSecretKey: e.target.value, autoGenerated: false }))}
                  placeholder="Chave secreta para criptografia de sessões"
                />
                <Button type="button" variant="outline" onClick={generateSecretKey}>
                  Gerar
                </Button>
              </div>
              {envVars.autoGenerated && (
                <p className="text-sm text-muted-foreground mt-1">
                  Chave gerada automaticamente. Guarde esta chave em local seguro.
                </p>
              )}
            </div>
            <Alert>
              <Settings className="h-4 w-4" />
              <AlertDescription>
                As configurações serão salvas no arquivo <code>.env</code> do projeto. 
                Certifique-se de fazer backup deste arquivo.
              </AlertDescription>
            </Alert>
            <Button 
              onClick={finalizeSetup} 
              disabled={loading || !envVars.sessionSecretKey}
              className="w-full"
            >
              {loading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              Finalizar Configuração
            </Button>
          </div>
        );

      default:
        return null;
    }
  };

  const getStepIcon = (stepId: string, index: number) => {
    if (isStepCompleted(stepId)) {
      return <Check className="h-4 w-4 text-green-600" />;
    }
    
    const icons = [Database, Database, User, Settings];
    const Icon = icons[index];
    return <Icon className="h-4 w-4" />;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4">
      <div className="w-full max-w-4xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
            Configuração Inicial do jsMyAdmin
          </h1>
          <p className="text-gray-600 dark:text-gray-300">
            Configure o sistema para o primeiro uso
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Progress Sidebar */}
          <div className="lg:col-span-1">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Settings className="h-5 w-5" />
                  Progresso
                </CardTitle>
                <CardDescription>
                  {completedSteps.length} de {steps.length} etapas concluídas
                </CardDescription>
              </CardHeader>
              <CardContent>
                <Progress value={progress} className="mb-4" />
                <div className="space-y-3">
                  {steps.map((step, index) => (
                    <div 
                      key={step.id}
                      className={`flex items-start gap-3 p-2 rounded-lg transition-colors ${
                        currentStep === index ? 'bg-blue-50 dark:bg-blue-900/20' : ''
                      }`}
                    >
                      <div className={`mt-0.5 ${isStepCompleted(step.id) ? 'text-green-600' : 'text-gray-400'}`}>
                        {getStepIcon(step.id, index)}
                      </div>
                      <div>
                        <h3 className={`font-medium text-sm ${
                          currentStep === index ? 'text-blue-600 dark:text-blue-400' : 'text-gray-900 dark:text-gray-100'
                        }`}>
                          {step.title}
                        </h3>
                        <p className="text-xs text-gray-600 dark:text-gray-400">
                          {step.description}
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Main Content */}
          <div className="lg:col-span-2">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  {getStepIcon(steps[currentStep]?.id, currentStep)}
                  {steps[currentStep]?.title}
                </CardTitle>
                <CardDescription>
                  {steps[currentStep]?.description}
                </CardDescription>
              </CardHeader>
              <CardContent>
                {error && (
                  <Alert variant="destructive" className="mb-4">
                    <AlertDescription>{error}</AlertDescription>
                  </Alert>
                )}
                
                {success && (
                  <Alert className="mb-4 border-green-200 bg-green-50 dark:border-green-800 dark:bg-green-900/20">
                    <Check className="h-4 w-4 text-green-600" />
                    <AlertDescription className="text-green-700 dark:text-green-400">
                      {success}
                    </AlertDescription>
                  </Alert>
                )}

                {renderStepContent()}
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}